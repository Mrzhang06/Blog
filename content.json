{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/posts/3eeb/"},{"title":"Hexo+GithubAction+Vercel&#x2F;GithubPages搭建个人博客","text":"之前用微信公众号作为自己的写作发布平台，但是发现有很多限制，不能使用markdown，不支持外链，排版格式也有很多限制，虽然网上有很多第三方微信编辑器，但是体验一番下来觉得还是不够自由。 相信有朋友会说，可以去CSDN、博客园、掘金简书之类的平台发啊，但是说实话我个人时比较抗拒这些平台的，原因嘛，大家应该也都懂得。在这之后，我就决定尝试自建写作发布平台，一番探索下来，发现博客是个不错的方式，框架平台又多，比如大名鼎鼎的wordpress、Zblog，还有像hexo、hugo、typecho等，部署方式还支持多种，可以自建服务器，也可使用托管服务。 在一众博客框架之间兜兜转转，最后决定选择Hexo，无他，主题多，配置简单，生成的是静态博客，可以使用大平台的页面托管服务，无需管理服务器。如果平台支持CI/CD，还能实现自动部署。 .post-summary{ display: none; } 组织结构 准备阶段 在本地安装调试Hexo博客框架 安装Hexo hexo 基本命令 更换hexo主题 配置站点和主题 将所有的更改提交到本地仓库缓存区 关联远程私有仓库 创建公开仓库并配置ssh公私钥 配置Github Action 开启GitHub Pages服务 设置博客的自定义域名 双线部署Github+Vercel，优化国内访问 总结 关于魔改主题的一点特别说明 前段时间清理邮箱邮件时发现Github像Gitlab一样允许免费用户无限量创建私有仓库，自己也打算使用hexo和GitHub搭建博客，正好记录一下自己的详细搭建过程。 组织结构 在Github创建一个私有仓库用于存放博客项目源代码及其文章源文件，创建一个公开仓库用于发布博客页面。在本地将hexo调试环境推送的私有仓库，同时触发私有仓库的Action CI/CD功能将博客源文件自动生成页面文件并推送到公开仓库，公开仓库会自动部署到Github Pages，为了方便后续SEO和优化国内访问，使用Vercel创建一个镜像站，使用自定义域名同时指向GitHub Pages和Vercel。 准备阶段在搭建Hexo博客前需要准备一下搭建环境，安装一些必要的软件： Node.js （version：18.14.2 LTS） Git （version: 2.33.1） Windows10 22H2 一个Github 账号 Windows Terminal(可选，也可使用Windows自带PowerShell) 在本地安装调试Hexo博客框架 撰文时Hexo -version@6.3.0，Icarus theme -version@5.1.0 安装Hexo打开终端（或PowerShell），npm全局安装hexo-cli，安装完成后可以关闭当前终端窗口。 1npm install hexo-cli -g 创建并选择一个空文件夹（示例：demo），用作博客的本地存储空间，进入文件夹后在文件夹中以管理员身份打开终端。 12345678910# 将该空文件夹初始为一个Git仓库git init# 返回父级目录cd ..# 将hexo安装到目标文件夹hexo init demo# 进入demo目录cd ./demo# 安装npm模块npm install 在执行hexo init demo命令时可能会报错，提示未注册的命令，解决方法：系统设置 -&gt; 更新和安全 -&gt; 开发者选项 -&gt; Powershell -&gt; 勾选更改执行策略...后并应用 在终端中执行hexo server，在终端中出现如下信息时在浏览器访问http://localhost:4000, hexo默认主题是landscape，界面如下： 操作到这一步，说明hexo框架已经正确安装了，按Ctrl+C结束hexo的web服务，下面需要记忆几个基本命令 hexo 基本命令这几条命令是日后要高频使用的命令，需要记忆， hexo clean : 清除本地已生成的静态页面缓存 hexo g(or generator) : 生成静态页面资源，在配置文件和文章源文件变更后需要重新生成 hexo s(or server) : 启动本地文章渲染预览服务 hexo d(or deploy) : 部署到服务器（我的部署方式基本用不到） 更换hexo主题默认的landscape主题实在是太简陋，必须换掉，我自己比较喜欢Next和Icarus两个主题，思考再三决定选择使用Icarus主题 Icarus官方提供了两种主题安装方式，一种是NPM安装，一种是源码安装，考虑到后续可能要魔改一部分Icarus主题，我决定使用源码安装。不过这里需要注意，源码安装时clone的是官方仓库，且是作为Git子模块安装的，若要魔改主题（例如本博客的文章页首原创标记）是需要修改源码的，但我是使用Git管理整个Hexo项目，Git子模块被修改，后面整个hexo源码推送到Github时是会报错的，因为自己不是Git子模块的所有者， 所以最稳妥和安全的方法是fork一份icarus官方主题源码到自己的GitHub账户下，后续自己要想魔改主题也会很方便。（Ps. 如果你觉得我魔改的Icarus主题不错，也可以fork我的） 在博客项目根目录内打开终端，安装Icarus主题到themes/icarus 1git submodule add https://github.com/Mrzhang06/hexo-theme-icarus themes/icarus 修改博客项目根目录中_config.yml文件的theme字段为icarus并保存，示例如下： _config.yml123456 ... ...# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus 安装完成后建议执行hexo g，自动生成主题配置文件（_config.icarus.yml） 在执行hexo g时可能会报错，提示npm module package缺失，按照提示安装对应的npm module package即可 本文撰文时提示缺少npm组件，需安装如下组件后再执行hexo g： 1npm install semver bulma-stylus@0.8.0 hexo-component-inferno@^2.0.2 hexo-pagination@^2.0.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 --save 执行hexo s预览博客发布后效果： 当浏览器访问http://localhost:4000，能够正常加载博客页面，说明主题已经正确加载，之后就需要自定义配置站点信息和主题 配置站点和主题_config.yml是站点配置文件，_config.icarus.yml是主题配置文件， 配置_config.yml文件请参见Hexo官方文档中的配置章节 配置_config.icarus.yml文件请参见Icarus主题官方文档，快速直达 如果你是使用的我魔改的Icarus主题，需要注意主题配置文件中article项下的original，值为true为开启文章页首原创标识和声明，如要声明文章为转载文章，需要在文章源文件的front-matter区域添加一个copy_from配置值，不添加则声明为原创，形式如下： 文章xxxx.md123456--- ... ...+ copy_from: xxx # 转载文章的源链接- copy_from: xxx # 不添加该配置值则声明原创--- 站点和主题配置完成后，在博客项目根目录打开终端，执行hexo s预览博客发布后效果。 将所有的更改提交到本地仓库缓存区在博客项目根目录内打开终端，逐条执行以下命令： 1234git add . # 注意命令末尾有一个英文的点git commit -m \"first commit\"# first commit 为提交的备注信息，可以自定义 关联远程私有仓库浏览器打开并登录Github，点击页面右上角加号(➕)，选择New Repository， Repository name: 仓库名自定义，Description: 自定义说明信息，类型这里选择private，其他的不用管，直接点击Create repository，创建后页面如下: 参考页面中第二项... or push an existing repository from the command line提示，在博客项目根目录内打开终端，逐条执行提示的命令。 当git push执行Ok后，回到github创建的私有仓库页面，看到博客源码及其文章源文件都已推送到Github，则该节步骤已配置完成。 创建公开仓库并配置ssh公私钥同上一步骤创建一个新仓库，仓库名建议为自己的Github用户名，类型选择Public，勾选Add a README file(可选)，之后点击创建仓库。 仓库名和GitHub用户名同名的仓库一般用于展示自己Github，因此在该仓库的默认分支main下的README.md文件中的内容将作为自己的Github账户概览页的展示内容，自建博客的话一般不建议使用main分支，可以选择创建一个名为gh-pages的分支用于存放自己的静态博客页面文件。因此，在配置_config.yml文件中的deploy字段时，填写如下内容（示例）： _config.yml123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: - type: git repo: git@github.com:Mrzhang06/Mrzhang06.git # 这是填写GitHub同名repo的地址 branch: gh-pages 在博客项目根目录内打开终端，执行ssh-keygen -t rsa -b 4096 -C \"xxx@example.com\"(这里的电子邮箱地址又你GitHub账户无关，可以是任意邮箱）生成ssh密钥， 12345678910111213141516171819202122232425262728293031PS D:\\demo&gt; ssh-keygen -t rsa -b 4096 -C \"zhangbiaodemail@gmail.com\"Generating public/private rsa key pair.Enter file in which to save the key (C:\\Users\\qq/.ssh/id_rsa): D:\\demo/github_action_deploy.rsa# 询问密钥保存位置，因为自己已经有一个ssh密钥了，# 所以这个选择保存在当前目录同时并重命名，所以输入 D:\\demo/github_action_deploy.rsaEnter passphrase (empty for no passphrase):# 给密钥设置密码，此处留空，直接按enter键Enter same passphrase again:# 二次确认输入的密码，同样留空，直接按enter键Your identification has been saved in D:\\demo/github_action_deploy.rsa.Your public key has been saved in D:\\demo/github_action_deploy.rsa.pub.The key fingerprint is:SHA256:ABtG40QnES2qoXs24Ul+2CBmcaw0Jztpk0dGQqIeays zhangbiaodemail@gmail.comThe key's randomart image is:+---[RSA 4096]----+|o. o%+. ||o. =.B. ||..+.o.. ||o=+* . ||o*&amp; S ||=@=. ||EB+* ||o O o || o o |+----[SHA256]-----+# 当出现上述内容时说明SSH密钥已经创建成功 此时在博客项目根目录中就会出现两个文件，一个名为github_action_deploy.rsa的私钥文件，一个名为github_action_deploy.rsa.pub的公钥文件。 用记事本打开博客项目根目录中的github_action_deploy.rsa.pub公钥文件，全选并复制，打开GitHub账户同名的仓库首页，点击Settings -&gt; Deploy keys -&gt; Add deploy key，tile可以自定义，将复制的公钥内容粘贴至key框处，勾选下方的Allow write access后点击Add key。 用记事本打开博客项目根目录中的github_action_deploy.rsa私钥文件，全选并复制，打开上文创建的用于存放博客源代码的私有仓库，点击setting-&gt; Secrets and variables -&gt; Actions -&gt; New repository secret，添加用于Action自动部署的Secret，secret name建议设置为HEXO_ACTION_DEPLOY_KEY，将复制的私钥内容粘贴至secret框处，点击Add secret。 配置Github Action在博客项目根目录内的.github文件夹下新建名为workflows的文件夹，在workflows文件夹内新建workflow流程文件，文件名称自定义，文件后缀为.yml，参考hexo官方文章中的Gihub Pages章节，编写自己的流程文件（示例文件名：action_deploy_workflow.yml），示例如下： action_deploy_workflow.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# workflow namename: Hexo Deploy# 触发条件on: push: branches: - main schedule: # 定时每天的6点和18点自动触发Deploy，搭配SEO使用 - cron: \"0 6,18 * * *\"# 任务jobs: deploy: name: Deploy Hexo Public To Page runs-on: ubuntu-latest env: TZ: Asia/Shanghai steps: # check it to your workflow can access it - name: Checkout Repository Access Permission uses: actions/checkout@v3 with: submodules: true # install Node.js and npm - name: Install Node.js 18.x uses: actions/setup-node@v3 with: node-version: 18.4.0 cache: 'npm' # install npm dependencies modules - name: Install Npm Modules run: | npm install hexo-cli -g npm install semver bulma-stylus@0.8.0 hexo-component-inferno@^2.0.2 hexo-pagination@^2.0.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 # cache dependencies to speed up workflows - name: Cache Node Modules uses: actions/cache@v3 id: npm-cache with: path: node modules key: ${{ runner.os }}-node-${{hashFiles('**/package-lock.json')}} restore-keys: | ${{ runner.os }}-node- - name: Install Dependencies if: steps.cache.outputs.cache-hit != 'true' run: npm ci # clean hexo cache and generate pages - name: Hexo Clean run: hexo clean &amp;&amp; hexo generate # generate article and deploy blog repository - name: Deploy Hexo To Github Pages uses: peaceiris/actions-gh-pages@v3 id: deploy with: deploy_key: ${{ secrets.HEXO_ACTION_DEPLOY_KEY }} # 此处为上文的HEXO_ACTION_DEPLOY_KEY，如使用示例文件内容，仅可替换 HEXO_ACTION_DEPLOY_KEY 为自定义secret 名称 external_repository: ${{ github.actor }}/Mrzhang06 # 用于部署页面文件的仓库，如使用示例文件内容，仅可替换 Nrzhang06 为自己的仓库名 publish_branch: gh-pages publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} 当workflow文件编辑完成后，在博客项目根目录内打开终端，执行以下命令 12345git add . # 注意命令末尾有一个英文的点git commit -m \"first commit\"# first commit 为提交的备注信息，可以自定义git push -u origin main 命令正确执行后，回到浏览器GitHub私有仓库页面，点击action， 绿色对勾标识workflow文件正确完成，红叉标识运行失败， 开启GitHub Pages服务浏览器访问GitHub个人主页，点击进入自己用于发布博客页面的仓库，依次点击settings -&gt; Pages -&gt; Build and Deployment中的Branch，选择gh-pages分支后点击save。保存后，点击页面上方的Visit site即可访问自己的博客站点了，在没有配置自定义域名前，自己的博客地址就是https://github用户名.github.io。 设置博客的自定义域名设置自定义域名，需要先在域名服务商处购买自己中意的域名，购买后访问平台的控制台，在域名解析的配置记录中添加一个CNAME记录，记录至填写github用户名.github.io。 回到本地博客项目目录，点击进入source目录，创建一个名为 CNAME 的文件，注意该文件没有后缀名，CNAME文件中填写自定义的域名。 回到GitHub博客页面托管仓库，依次点击settings -&gt; Pages，在Custom domain中填写自定义域名，之后点击save保存 再梭哈一遍git命令push一下本地更改，以触发action自动部署博客，稍后即可使用域名访自己的博客了 &gt;folded12345git add . # 注意命令末尾有一个英文的点git commit -m \"first commit\"# first commit 为提交的备注信息，可以自定义git push -u origin main 双线部署(Github+Vercel)，优化国内访问众所周知的原因，国内访问Github速度及其缓慢，甚至部分地区直接无法访问，为解决该问题，可以选择双线部署，将Github Pages作为源博客，使用其他国内能访问的平台做博客的镜像，国内能访问的支持静态页面托管的平台有很多，比如Gitee，Codeup，coding，Vercel，CloudFlare的Pages，还有国内云厂商的对象存储平台（比如阿里OSS，腾讯COS，华为OBS）等， 在一众可选之间，我选择Vercel，（你问我为啥不选别的，因为我还没有部署）， 注册并登录Vercel，点击页面中部的add new -&gt; project，在页面中关联Github账户，选择自己托管自己博客源码的私有仓库，在框架模板中选择Hexo，自定义Project Name，其他的基本不用修改，直接点击Deploy， 部署完成后回到OverView界面，点击进入自己刚刚创建的Projct， 页面中的DOMAINS就是vercel为自己分配的页面站点地址，点击页面上方的Settings -&gt; Domains，添加自己的博客域名，会有两种应用方式，一种是添加域名CNAME记录，一种是修改域名的解析服务器，个人建议使用第一种，直接添加一条域名的CNAME记录即可。添加方式同上一小节。 总结之所以选择搭建静态博客，主要原因还是有很多平台可以免费托管静态博客，自己无需购买服务器以及后续的运维管理（这不前一阵子阮一峰老师的博客还被攻击了），虽然功能受限了一点，但是综合使用体验下来还是非常省心的。 在经过这种结构的部署后，博客的所有源文件都通过git进行管理，每次在本地写完一篇文章，直接git梭哈一把，把所有更改推送到GitHub的私有仓库，几分钟之内就可以自动部署完成。 &gt;folded12345git add . # 注意命令末尾有一个英文的点git commit -m \"first commit\"# first commit 为提交的备注信息，可以自定义git push -u origin main 使用这种管理方式后也不用担心哪一天自己的电脑坏掉后博客文件丢失；如果自己有多台电脑，也能很方便的跨设备编辑写作，只需要先在另一台电脑安装Node.js，配置一下Git信息，然后Clone一下自己托管博客源文件的私有仓库，再把克隆下来的项目文件夹作为Hexo博客文件夹，再执行一遍简化的安装流程，便可开始写作，具体步骤如下 123456789101112# 电脑安装Node.js和Git# 配置系统全局的Git用户信息，用以向Github推送源文件# 任意位置打开终端，全局安装Hexo框架npm install hexo-cli -g# 在本地选择一个位置存放博客项目文件（假设为D盘根目录，）git clone https://xxxxx # 自己托管博客源码的私有仓库地址（假设私有仓库名为blog_src）# 进入博客项目目录cd D:\\blog_src# 安装Node modulesnpm install# 拉取Git子模块，git submodule update --init --recursive 之后就可以正常的执行hexo new post xxxx 、 hexo s等操作了，文章创作完成后，直接git梭哈一把，就OK了。 关于魔改主题的一点特别说明上文说到，建议自己fork一份主题的官方源码，自己如果想要修改源码，就可以直接修改。如果博客已经搭建成功，使用一段时间后魔改主题了主题源码，此时则需要在自己的博客项目根目录中打开终端，同步更新一下Git子模块， 什么是Git子模块？ 简单理解就是将另一个项目仓库作为本项目仓库的一个模块引用， 因为自己使用的Icarus主题是作为Git子模块关联在博客项目中的，最开始使用主题时(未魔改前)Git子模块版本假设是A，主题魔改后，作为Git子模块的主题项目最新版本假设是B。但是博客项目并不知道作为git子模块的主题项目已经有了新版本，还是引用的A。因此要想将魔改版本的主题应用，就需要更新一下子模块的引用信息，将子模块更新到最新版本。 在博客项目根目录打开终端，执行如下命令： 1git submodule update --remote","link":"/posts/8123/"},{"title":"Hexo个人博客SEO配置记录","text":"什么是SEO？ 常见的SEO手段/技巧 域名 TKD sitemap robots.txt 链接层级和目录层级 固定链接的设置 内链 外链 配置404页面 优质内容 我的博客站点SEO 为每篇文章添加TDK 为博客的每篇文章配置固定链接 博客配置sitemap.xml 博客配置robots.txt 向主流搜索引擎提交sitemap 利用API主动向搜索引擎提交URL 什么是SEO？搜索引擎优化（英语：search engine optimization，缩写为SEO）是透过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少网站都希望透过各种形式来影响搜索引擎的排序，让自己的网站可以有优秀的搜索排名。当中尤以各种依靠广告维生的网站为甚。 所谓“针对搜索引擎作优化的处理”，是指为了要让网站更容易被搜索引擎接受。搜索引擎会将网站彼此间的内容做一些相关性的资料比对，然后再由浏览器将这些内容以最快速且接近最完整的方式，呈现给搜索者。搜索引擎优化就是通过搜索引擎的规则进行优化，为用户打造更好的用户体验，最终的目的就是做好用户体验。 搜索引擎优化(SEO)—— wikipedia 以上便是维基百科关于SEO的解释，既然SEO是为了让网站更容易被搜索引擎接受，那么我们不妨从以下几个方面来主动告诉搜索引擎，我的网站上有什么。 常见的SEO手段/技巧域名一个网站的是否容易被人熟知，首先便是其名字是否让人容易记忆，而域名作为一个网站在网络上的身份证，一个简单，易记、具有特殊含义的域名更容易被人关注，也更容易吸引流量。 TKD即网站页面的Title、Keywords、Description，这些信息通常会存储于网页的Front-matter信息中 123&lt;title&gt;这里是页面标题&lt;/title&gt;&lt;meta name=\"keywords\", content=\"这里是页面关键词\"&gt;&lt;meta name=\"description\" content=\"这里是页面描述\"&gt; title：当下人们普遍反感标题党，标题浮夸，内容垃圾掉渣，但是为什么人们会有这种结论呢，还不是经过大量点击访问，不断踩坑总结的经验，有一点是不可反驳的是，标题党的确是能够吸引用户访问。当然本篇不是要讲如何写浮夸的标题，而是说一个清晰，明确的标题更容易切中搜索引擎用过户的检索关键字，更容易被用户检索并访问到。 keywords：keywords的主要作用是告诉搜索引擎本页内容是围绕着哪些关键词展开的，因此每个keywords都要在文中有相应的匹配。对自己网站的页面添加keywords虽然对网站排名的帮助并不大，但是却能够提高网站在搜索引擎的整体权重。虽然Google已经声称不再使用Keywords，但是作为个人博客站长，自己的博客文章主要面对的用户群体还是中文区用户，SEO也主要是针对中文搜索引擎，那么Keywords就还是有必要的。keywords长度设置一般不超过4个，过多关键词反而不利于检索，中间用英文的逗号做间隔， description：keywords是对文章关键字的展示，那么description就是对页面内容的高度概括，是页面内容的摘要。同keywords一样，description虽然对提升网站排名帮助不大，但是对于用户检索却起着至关重要的作用 sitemapSitemap(站点地图)是一种文件的统称，通常以txt或者xml格式的形式存在于站点的根目录。通过Sitemap(站点地图)你可以告诉搜索引擎关于你的站点中的网页、视频或其他相关信息，帮助搜索引擎更好的认识和理解你的站点。格式正确的站点地图会帮助搜索引擎更高效的抓取你的网站。 robots.txt这是一个说明文件，用来告诉搜索引擎的蜘蛛程序自己的站点下面那些页面可以被抓取，哪些不可以被抓取。robots.txt文件必须放置在站点的根目录下，且文件必须全部是小写英文字母，名为robots.txt的格式。 链接层级和目录层级页面链接层级和目录层级过深，会严重影响用户体验，能够保证用户在不超过3次点击就进入页面，对于用户体验来说是非常好的。 固定链接的设置一个资源对应一个固定链接，即使后期资源位置发生变化，依然能够通过该固定链接访问到 内链即站点内部的链接，每一个指向页面的内联都是对该页面重要程度的投票，因此，在一个网站中导航栏的页面权重就会非常高。如果站内页面能够相互关联，有助于提升网站整体的搜索权重。 外链就是其他网站到自己站点的链接，如果对方将你的站点地址添加到对方的友链列表，并且可以长期稳定的访问，能够极大程度的提升自己网站的搜索权重。 配置404页面404页面是用来告知用户当前访问的页面并不存在，如果自己的站点没有设置404页面，当用户访问你站内不存在的页面时，浏览器会直接空白显示并报错，这严重影响了用户体验，甚至会误导用户你的网站已经存在。设置一个简洁美观404页面，并引导用户访问其他页面或返回本站点首页对于一个网站来说是至关重要的。 优质内容上面所说的都是技术手段，用来吸引用户访问，而用户真正浏览的，是自己站点内的内容，一个有着优质内容的站点，自然会吸引用户访问。 我的博客站点SEO上文简单说了一下SEO以及常见SEO方式，那么，现在就操练起来，开始对自己的博客进行SEO优化。 首先说明，我的博客是采用GitHub Pages + Github Action自动构建自动部署的，博客项目的全部源码包括文章源文件使用一个私有仓库存储，站点页面使用一个公开的仓库存储，使用git管理自己hexo博客。如果你的部署方式与我的不同，请酌情参考， 点击此处查看我的博客详细配置过程。 博客域名选定：blog.geektime.club 为每篇文章添加TDK我的博客使用Hexo+Icarus theme生成的静态页面，不具备服务后端，因此所有的TDK都要写入文章中，Icarus 主题有设置front-matter的配置项，位置如下： _config.icarus.yaml1234head: meta: - \"name=xxx;content=xxx\" - \"name=xxx;content=xxx\" 但是需要注意，该配置项是全局配置项，会应用到站内的每个页面，不建议在此设置。每篇文章的内容不同，对应的TDK自然也不同，页面的TDK可以在每篇文章源文件的front-matter中设置，示例如下： 文章xxx.md123456789--- ... ... ...head: meta: - \"name=xxx;content=xxx\" - \"name=xxx;content=xxx\"--- 为博客的每篇文章配置固定链接hexo框架默认情况下为每篇文章配置的链接是domain/year/month/article-title，这种链接对文章检索非常不友好，且在文章的title或源文件名更改后，文章的链接也会随之更该。若要使文章的链接固定不变，可以安装abbrlink插件，为每篇文章生成一个唯一的链接，方法如下： 在博客项目根文件夹下打开终端，安装如下Hexo插件 1npm install hexo-abbrlink --save 打开目录内的站点配置文件（_config.yml），配置abbrlink插件， _config.yml123456789permalink: posts/:abbrlink/# 文件末尾添加以下内容# hexo-abbrlinkabbrlink: alg: cr32 rep: hex drafts: false 保存配置文件后在终端执行hexo g 应用更改，并生成页面文件，当看到自己的文章源文件的front-matter信息中多了一项：abbrlink: xxx，即该项配置完成 hexo-abbrlink更多自定义配置请点击这里 博客配置sitemap.xmlhexo框架默认情况下不能生成sitemap.xml，需要通过安装hexo插件来实现，在博客项目根文件夹下打开终端，安装如下Hexo插件： 1npm install hexo-generator-sitemap --save 打开目录内的站点配置文件（_config.yml），配置sitemap插件，在末尾添加内容如下： _config.yml12345# hexo-generator-sitemaphexo-generator-sitemap: path: sitemap.xml tags: true category: true 这里面的path字段填写sitemap的存储位置，默认值：path: sitemap.xml，sitemap.xml一般放在站点的根目录，所以一般不用改动 博客配置robots.txt为博客创建蜘蛛协议robots.txt文件，告诉网络蜘蛛哪些页面可以被爬取索引在hexo项目目录的source文件下创建robots.txt文件，在该文件中添加如下内容 robots.txt12345678910111213User-Agent: *# 告诉蜘蛛哪些可以被爬取（真实文件中请勿添加该行）Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Allow: /about/# 告诉蜘蛛哪些不能被爬取（真实文件中请勿添加该行）Disallow: /js/Disallow: /css/Disallow: /fonts/# 指定站点地图所在位置（真实文件中请勿添加该行）Sitemap: https://blog.geektime.club/Sitemap.xml 向主流搜索引擎提交sitemap在完成上文几步后，执行后文操作前，请先在终端执行git push -u origin main将本地更改同步到Github上 同时需注意，以下操作需要自己的博客站点已经部署完成，且能通过域名访问，方可执行。 百度 首先注册百度搜索资源平台，平台可以使用百度账号直接登录。 点击个人中心 -&gt; 站点管理 -&gt; 添加网站，添加个人博客站点 添加网站的第三步验证网站，可选的有两个网站的验证方式，亦或是三个，多了一个CNAME验证方式。这里我选择的是HTML标签验证的方式 可以看到这种方式实际上是在站点的front-matter信息中添加一条meta信息，刚好我所使用的icarus主题就提供有便捷的配置项，添加方式在上文已经给出，点击这里查看。 验证完成后，点击搜索服务 -&gt; 普通收录，在此页面可以看到百度提供了三种收录方式，我的博客采用API提交+sitemap提交，API提交方法是会在后文说明。 点击sitemap，按照页面提示提交自己的sitemap文件链接。 Bing 注册或登录必应网站管理员工具，添加自己的网站 验证网站支持多种方式，我选择使用HTML meta 标记，使用方式同上文百度。 点击网站地图 -&gt; 提交网站地图，在弹出的对话框中输入自己站点的sitemap文件所在位置URL。 Google 注册或登录Google Search Console 由于我是使用Github Pages发布站点，所以选择第二种方式网址前缀，输入自己的domain，然后会弹出如下界面 可以看到验证方式也是有很多种的，同样的，我选择使用HTML标记方式验证所有权，使用方式同上文百度。 验证完成后点击页面左侧站点地图，在右侧填入sitemap.xml(如果你的站点地图不在站点根目录，请自行选择输入) 利用API主动向搜索引擎提交URL由于我的站点是使用Github Action服务自动生成的，Hexo插件列表里面的自动提交URL到搜索引擎的插件不能能正常工作，且在使用GitHub Action时无法查看提交情况。所以我的方式是在Github Action workflows 文件中添加一个步骤，让博客在自动部署完成后将站点的URL提交到各大搜索引擎。且该种方式可以通过查看Action的详细执行流程确定URL是否正常提交。 使用API提交URL，需要先从站长平台获取用于鉴权的token。 百度：登录百度搜索资源平台，点击搜索服务 -&gt; 普通收录，在API提交方式标签下，复制接口调用地址种token=后面的值，粘贴至空白文档，以备下文使用。 Bing：登录必应网站管理员工具，点击页面右上角齿轮图标(⚙)，侧边弹出页面点击API访问 -&gt; 点击API密钥，生成API访问Token，复制token并粘贴至空白文档，以备下文使用。 Google：登录GCP (Google Cloud Platform)，点击左上角折叠菜单按钮，弹出页面点击IAM和管理 -&gt; 服务账号， 在上方点击+创建服务账号， 输入自定义服务账号名称，这里以aaa示例，之后之后直接点击完成 完成账号创建后，点击列表中自己刚刚创建的账号，切换到密钥标签卡，点击添加密钥 -&gt; 创建新密钥， 选择并创建json格式的密钥，保存该json密钥（切勿随意公开）， 在GCP页面上方搜索框中输入indexing API，点击下方市场中的indexing API，启用indexing API， 打开Github用于存放博客项目源文件的仓库，点击仓库的setting-&gt; Secrets and variables -&gt; Actions -&gt; New repository secret，创建以下几个secret: BAIDU_TOKEN : 值填写上文获取的百度API提交token BING_TOKEN : 值填写上文获取的必应API提交token GOOGLE_CLIENT_EMAIL : json密钥中的client_email对应的值 GOOGLE_PRIVATE_KEY : json密钥中的private_key对应的值 COUNT : 默认为10 SITE : 你的博客地址URL，包括https:// SITEMAP : 你站点的sitemap.xml文件的URL 在博客项目文件夹下的.github/workflows/xxx.yml，向xxx.yml中一个Action的step，注意yaml文件的语法，层级缩进不能使用tab键，必须使用空格控制缩进。 xxx.yml12345678910111213141516jobs: deploy: ... ... ... # Search Engine Urls Push - name: Search Engine Urls Push uses: 3Alan/search-engines-urls-push@v0.2.3 with: site: ${{ secret.SITE }} count: ${{ secret.COUNT }} sitemap: ${{ secret.SITEMAP }} bing-token: ${{ secrets.BING_TOKEN }} baidu-token: ${{ secrets.BAIDU_TOKEN }} google-client-email: ${{ secrets.GOOGLE_CLIENT_EMAIL }} google-private-key: ${{ secrets.GOOGLE_PRIVATE_KEY }} 以上全部执行完成后在终端执行git push -u origin main同步本地更改到GitHub，会自动触发Action，点击博客源文件仓库中的Action，点击正在构建的Action，构建过程中可以看到如下：截图中的bing报错是因为超出了Bing的每日提交数目限制，不影响正常提交","link":"/posts/38/"},{"title":"icarus主题的高级用法","text":"自定义效果 画廊 突出提示栏 文章摘要 文章内容黑幕/刮刮乐 页内标签页 彩色提示消息 图片引用声明 Hexo内置专用的标签插件 Block Quote | 引用块 Code Block | 代码块 反引号代码块 插入jsFiddle 插入Gist 插入iframe 插入image 插入link 插入Youtube 插入Vimeo 引用站内其他文章 文章摘要和截断 自定义效果画廊安装使用若要在文章中启用主题自带的画廊组件，首先需要在主题配置文件中启用画廊组件。 _config.icarus.yml12plugins: gallery: true 需要使用&lt;div class=\"justified gallery\"&gt;与&lt;/div&gt;标签包裹，如果要使用markdown语法来引用图片，则需要在HTML标签和MarkDown之间留有空行。使用HTML语法时则无需留空行。需注意，文章中启用画廊组件时建议文章主体和画廊部分留空行。 markdown语法引入图片123456&lt;div class=\"justified-gallery\"&gt;![](图片路径或URL)![tiger](https://images.pexels.com/photos/792381/pexels-photo-792381.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=2)&lt;/div&gt; HTML语法引入图片1234&lt;div class=\"justified gallery\"&gt;&lt;img src=\"图片路径或URL\" alt=\"图片别名\"/&gt; &lt;img src=\"https://images.pexels.com/photos/792381/pexels-photo-792381.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=2\" alt=\"tiger\"/&gt; &lt;/div&gt; 示例效果 示例图片来源于www.pexels.com 突出提示栏 形如上面或官方文档中的蓝色突出提示栏，和主题颜色很搭配，实现方式如下 第一种第一种提示，页面内的提示12345&lt;article class=\"message message-immersive is-primary\"&gt; &lt;div class=\"message-body\"&gt; &lt;i class=\"fas fa-circle-info mr-2\"&gt;&lt;/i&gt;示例图片来源于&lt;a href=\"https://www.pexels.com\"&gt;www.pexels.com&lt;/a&gt; &lt;/div&gt;&lt;/article&gt; 第二种需要注意。官方第二种点击后实际是在站内跳转，所以这里就需要使用以下hexo框架为我们提供的post_path变量了, 示例中en/post_path为文章的post_path，具体请参见Hexo文档 第二种提示，能够站内跳转12345&lt;article class=\"message message-immersive is-primary\"&gt; &lt;div class=\"message-body\"&gt; &lt;i class=\"fas fa-globe-asia mr-2\"&gt;&lt;/i&gt;本文同时提供如下语言的翻译：&lt;a href=\"{% post_path en/Getting-Started %}\"&gt;English&lt;/a&gt;. &lt;/div&gt;&lt;/article&gt; 第三种与第一种基本一致，略 第三种提示 &gt;folded12345&lt;article class=\"message message-immersive is-warning\"&gt; &lt;div class=\"message-body\"&gt; &lt;i class=\"fas fa-question-circle mr-2\"&gt;&lt;/i&gt;文章内容有误？请点击&lt;a href=\"反馈地址URL\"&gt;此处&lt;/a&gt;提交修改。 &lt;/div&gt;&lt;/article&gt; 文章摘要用户浏览一个博客网站时，最先看到的是文章标题以及文章的摘要，通常情况下文章的摘要是对文章内容的高度概括，一般不适合展示在文章正文，换言之就是摘要只展现在文章列表，而在文章正文处不显示，有两种方式可以实现该种效果。 第一种将文章的摘要写在markdown文件开头的front-matter信息中，本篇文章的摘要使用就是这种 文章xxx.md1234567--- ... ... ...excerpt: 这是一篇关于...---xxxxxx文章正文 第二种在文章正文中使用Bulma搭配HTML标签实现 文章xxx.md123456789101112131415这里的内容会出现的**简介和正文**{% raw %}&lt;div class=\"post-summary\"&gt;{% endraw %}这里的内容只会出现在**简介**{% raw %}&lt;/div&gt;{% endraw %}&lt;!--more--&gt;&lt;style type=\"text/css\"&gt; .post-summary{ display:none; }&lt;/style&gt;这里的内容只会出现在**正文** 文章内容黑幕/刮刮乐知道这个东西源自与吾爱破解论坛，可惜现在论坛不让用刮刮乐了👉，难搞，那就在自己的博客上面玩一玩吧。 .hide { color: #fff} 文章内容文字黑幕、刮刮乐12345678910知道这个东西源自于吾爱破解论坛，可惜现在论坛不让用刮刮乐了, {% raw %}&lt;span class=\"hide\"&gt;难搞，&lt;/span&gt;{% endraw %}那就在自己的博客上面玩一玩吧。{% raw %}&lt;style type=\"text/css\"&gt; &lt;!--这是黑幕代码--&gt; .hide { color: #000; background: #000; } .hide:hover { color: #fff; } &lt;!--这是刮刮乐代码--&gt; .hide { color: #fff}&lt;/style&gt;{% endraw %} 页内标签页 .example-tab-container { margin: 0 0 20px 0; padding: 10px 20px 20px 20px; border-radius: 6px; box-shadow: 0 0.5em 0.75em -0.125em rgb(10,10,10,0.1), 0 0px 0 1px rgb(10,10,10,0.02); } 标签页是一个功能强大的用于展示平行内容的标签插件，同一时间内，只有活动的标签内容才能展示给用户 标签页是一个功能强大的用于展示平行内容的标签插件，同一时间内，只有活动的标签内容才能展示给用户，形如官方文档页面的效果，其实现方式如下： 语法定义123456789{% tabs size:&lt;大小&gt; align:&lt;对齐&gt; style:&lt;样式&gt; %}&lt;!-- tab id:&lt;标签id&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; active --&gt;&lt;标签内容&gt;&lt;!-- endtab --&gt;&lt;!-- tab id:&lt;标签id&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; --&gt;&lt;标签内容&gt;&lt;!-- endtab --&gt;...{% endtabs %} 还原官网的页面效果: 从源码安装 使用NPM安装 从GitHub的仓库中下载源码的压缩包…… 若要使用NPM将Icarus安装为node包…… 标签容器（tabs）字段解释标签容器（tabs）有三个字段，分别为size， align， style， size可选项，定义标签页的大小，有四个配置值（small，不指定(默认)，medium，large），示例如下： 第一页 第二页 这是一个小（small）标签页容器的第一页 这是一个小（small）标签页容器的第二页 第一页 第二页 这是一个不指定（默认）标签页容器的第一页 这是一个不指定（默认）标签页容器的第二页 第一页 第二页 这是一个中（medium）标签页容器的第一页 这是一个中（medium）标签页容器的第二页 第一页 第二页 这是一个大（large）标签页容器的第一页 这是一个大（large）标签页容器的第二页 align可选项，用于定义标签页按钮的对齐方式，有四个配置值（不指定(默认left)，centered，right，fullwith），示例如下： 第一页 第一页 这是一个左对齐（或不指定对齐）的标签页容器的第一页 这是一个左对齐（或不指定对齐）的标签页容器的第二页 第一页 第一页 这是一个居中对齐（centered）的标签页容器的第一页 这是一个居中对齐（centered）的标签页容器的第二页 第一页 第一页 这是一个右对齐（right）的标签页容器的第一页 这是一个右对齐（right）的标签页容器的第二页 第一页 第一页 这是一个全宽（fullwidth）的标签页容器的第一页 这是一个全宽（fullwidth）的标签页容器的第二页 style可选项，用于定义按钮的样式，可以和全宽对齐方式结合，共有六种配置值。 默认对齐方式下的盒子（boxed）样式、拨动开关（toggle）样式、圆角拨动开关(toggle-rounded)样式； 全宽对齐方式(fullwidth)下的盒子样式、拨动开关样式、圆角拨动开关样式。示例如下： 第一页 第二页 这是一个盒状（boxed）标签容器的第一页 这是一个盒状（boxed）标签容器的第二页 第一页 第二页 这是一个拨动开关（toggle）标签容器的第一页 这是一个拨动开关（toggle）标签容器的第二页 第一页 第二页 这是一个圆角拨动开关toggle-rounded）标签容器的第一页 这是一个圆角拨动开关（toggle-rounded）标签容器的第二页 第一页 第二页 这是一个全宽盒状（boxed）标签容器的第一页 这是一个全宽盒状（boxed）标签容器的第二页 第一页 第二页 这是一个全宽拨动开关（toggle）标签容器的第一页 这是一个全宽拨动开关（toggle）标签容器的第二页 第一页 第二页 这是一个全宽圆角拨动开关toggle-rounded）标签容器的第一页 这是一个全宽圆角拨动开关（toggle-rounded）标签容器的第二页 标签（tab）字段解释id必填项，为标签页元素的独特标识符(ID)，且该标识符在文章页面中是唯一的，这样Icarus主题才能正确定位，显示和隐藏标签页中的内容。 active必填项，标记当前标签页是否默认显示， 同一时刻一个标签组中只有一个标签页可以设置为默认显示（active）。 title可选项，定义标签按钮中显示的图标，它的值应为FontAwesome中的class-name，如果图标的class-name中包含空格，则配置名和配置值需要用引号包裹住。 Github Node.JS 这个标签页的图标（icon）为（\"icon:fa-brands fa-github\"） 这个标签页的图标（icon）为（\"icon:fa-brands fa-node-js\"） title: 可选项，定义标签页按钮的标题，如果标题中含有空格，则配置名和配置值需要用引号包裹住。 有标题的标签页 有标题的 标签页 这是一个有标题的标签页，标题（title）为（title:有标题的标签页） 这是一个有标题且标题带空格的标签页，标题（icon）为（\"title:有标题的 标签页\"） 这是一个无标题的标签页 彩色提示消息五颜六色的消息块可以用来强调你文章中的部分文本，它的语法定义如下： 语法定义123{% message color:&lt;颜色&gt; size:&lt;大小&gt; icon:&lt;图标&gt; title:&lt;标题&gt; %}&lt;消息内容&gt;{% endmessage %} color 字段可选项，用于定义消息块颜色，可用配置值有default，dark，primary，info，success，warning，danger。示例如下： default 这是没有指定配置值的消息块 dark 这是配置值为黑色（dark）的消息块 primary 这是配置值为主题色（primary）的消息块 info 这是配置值为提示色（info）的消息块 success 这是配置值为成功色（success）的消息块 warning 这是配置值为警告色（warning）的消息块 danger 这是配置值为警告色（danger）的消息块 size 字段可选项，用于定义消息块的大小，可用配置值有small，default，medium，large，示例如下： small 这是配置值为小（small）的消息块 default 这是没有指定配置值的消息块 medium 这是配置值为中（medium）的消息块 large 这是配置值为大（large）的消息块 icon 字段可选项，用于定义消息块头部的图标，配置值应为FontAwesome图标的class name，如果图标的class name中包含有空格，则配置名与配置值需要用引号包裹住。 一个有着Github图标的消息块 这是一个有着GitHub图标（”icon:fa-brands fa-github”）的消息块 一个有着Node.js图标的消息块 这是一个有着Node.js图标（”icon:fa-brands fa-node-js”）的消息块 title 字段可选项，用于定义消息块的标题，如果标题中包含有空格，则配置值与配置名需要用引号包裹住。 有标题的 消息块 这是一个有标题（”title:有标题的 消息块“）的消息块。 这是一个没有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 图片引用声明食用方式： 图片引用声明1234&lt;a class=\"tag is-dark is-medium\" href=\"图片URL\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-camera\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;-----声明文字----&lt;/a&gt; 示例1234&lt;a class=\"tag is-dark is-medium\" href=\"https://www.vecteezy.com/free-vector/vector-landscape\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-camera\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;Vector Landscape Vectors by Vecteezy&lt;/a&gt; &nbsp;&nbsp; Vector Landscape Vectors by Vecteezy Hexo内置(专用)的标签插件 Block Quote | 引用块在文章中插入引言，可包含作者、来源、和标题别名：quote，语法格式如下： 123{% blockquote [author[, source]] [link] [source_link_title] %}content{% endblockquote %} 示例-没有提供参数123{% blockquote %}Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.{% endblockquote %} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 示例-引用书里的句子123{% blockquote David Levithan, Wide Awake %}Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.{% endblockquote %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 示例-引用Twitter帖子123{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}NEW: DevDocs now comes with syntax highlighting. http://devdocs.io{% endblockquote %} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 示例-引用网络上的文章123{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}Every interaction is both precious and an opportunity to delight.{% endblockquote %} Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Code Block | 代码块在文章中插入代码。别名：code，语法格式如下： 123{% codeblock [title] [lang:language] [url] [link text] [additional options] %}code snippet{% endcodeblock %} 示例-普通代码块123{% codeblock %}alert('Hello World!');{% endcodeblock %} 1alert('Hello World!'); 示例-指定语言123{% codeblock lang:objc %}[rectangle setX: 10 y: 10 width: 20 height: 20];{% endcodeblock %} 1[rectangle setX: 10 y: 10 width: 20 height: 20]; 示例-附件说明123{% codeblock Array.map %}array.map(callback[, thisArg]){% endcodeblock %} Array.map1array.map(callback[, thisArg]) 示例-附加说明和网址1234{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3]{% endcodeblock %} _.compactUnderscore.js12_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3] 反引号代码块使用方式同代码块，但是使用三个反引号来分割块，即markdown默认的代码块形式，语法格式如下： [title] [url] [link text]123code snippets 插入jsFiddle在文章中嵌入jsFiddle，语法格式如下： 1{% jsfiddle shorttag [tabs] [skin] [width] [height] %} 示例1{% jsfiddle zx2xyzea html,css,js,result light 100% 400% %} 插入Gist在文章中嵌入Gist，语法格式如下： 1{% gits gist_id [filename] %} 示例1{% gist defunkt/2059 %} 插入iframe在文章页面中嵌入iframe 1{% iframe url [width] [height] %} 示例1{% iframe https://blog.geektime.club 100% 400% %} 插入image在文章中插入图片 1{% img [class names] /path/to/image [width] [height] '\"title text\" \"alt text\"' %} 插入link在文章中插入超链接 1{% link text url [external] [title] %} 插入Youtube在文章中嵌入Youtube视频iframe 1234{% youtube video_id [type] [cookie] %}// [type]：默认为空，可选 playlist (播放列表)// [cookie]: 默认为true，可选false 示例1{% youtube yaqe1qesQ8c %} 插入Vimeo在文章中嵌入Viemo视频iframe 1{% vimeo video_id %} 示例1{% vimeo 191822120 %} 引用站内其他文章在文章中插入站内其他文章的引用链接 12{% post_path filename %}{% post_link filename [title] [escape] %} 在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。 例如，在文章中使用 {% post_link how-to-bake-a-cake %} 时，只需有一个名为 how-to-bake-a-cake.md 的文章文件即可。即使这个文件位于站点文件夹的 source/posts/2015-02-my-family-holiday 目录下、或者文章的永久链接是 2018/en/how-to-bake-a-cake，都没有影响。 默认链接文字是文章的标题，你也可以自定义要显示的文本。 默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用escape选项，禁止对特殊字符进行转义 文章摘要和截断在文章中使用 &lt;!-- more --&gt;，那么 &lt;!-- more --&gt; 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。","link":"/posts/8917/"},{"title":"个人hexo博客插件的使用和配置","text":"Bilibili 视频卡片一个hexo插件，用以在文章中插入B站的视频卡片，形如如下样式： 00:01:01 电视无信号时哔的素材（无水印） 34.6万 288 视频 某科学的绿冰块 安装：在博客项目根目录打开终端， 1npm install hexo-bilibili-card --save 使用：在博客文章源文件中插入， 1234{% bilicard video_id %}&lt;!-- For Example --&gt;{% bilicard BV1jt411d7A5 %} video_id：B站视频的BV号或AV号 Twitter 标签卡片一个Hexo插件，用以将twitter推文以卡片形式嵌入博客文章，形如如下样式： 安装：在博客项目根目录打开终端 1npm install hexo-tag-twitter --save 使用：在博客文章源文件中插入 123456{% twitter tweet_url %}or{% twitter tweet-id user-id %}&lt;!-- For Example --&gt;{% twitter https://twitter.com/github/status/1628909136959217665 %} tweet_url：推文的URL，获取方式：点击推文右上角三个点中的嵌入推文， tweet-id：推文id，即tweet_url中末尾的一串数字， user-id：推特用户名，需注意，使用第二种插入方式需在博客站点配置文件(_config.yml)添加如下内容：_config.yml12tagTwitter: id: xxx # twitter用户名 Spotify 标签卡片一个Hexo插件，用以在文章中嵌入任何类型的Spotify内容，形如如下样式： 安装：在博客项目根目录打开终端 1npm install hexo-tag-spotify-batter --save 使用：在博客文章源文件中插入 1234{% spotify [spotify_resource] [type] [size] %}&lt;!-- For Example --&gt;{% spotify https://open.spotify.com/track/0NLawpfEWemLa1LGvFf2VU?si=af69424351cd4388 %} spotify_resource: 支持两种格式，spotify URI 和 Http link12345# 示例# spotify URI格式{% spotify spotify:track:0NLawpfEWemLa1LGvFf2VU %}# Http link格式{% spotify https://open.spotify.com/track/0NLawpfEWemLa1LGvFf2VU?si=af69424351cd4388 %} type: 有三个可选配置值，分别为music, podcast, playlist，默认为music，(可省略字段) size: 有两个可选配置值，分别为large, compact，默认为compact，(可省略字段) 豆瓣卡片一个Hexo插件，用以在文章中插入豆瓣读书、电影、音乐卡片，形如如下样式： 见字如晤 书名: 货币战争 作者: 宋鸿兵编著 出版年份: 2007-6 评分: 7.2 灯影绰约 电影名: 星际穿越Interstellar(2014) 导演: 克里斯托弗·诺兰 主演: 马修·麦康纳/安妮·海瑟薇 上映时间: 2014-11-12(中国大陆) 评分: 9.4 余音绕梁 音乐名: 风云2 表演者: 屠洪刚 发行时间: 2005-04-25 评分: 8.9 安装：在博客项目根目录打开终端 1npm install hexo-douban-card --save 使用：在博客文章源文件中插入 1234{% douban [type] [id] %}&lt;!-- For Example --&gt;{% douban book 2081876 %} type: 有三个可选配置值。分别为book，movie，music， id: 资源在豆瓣的对应id， CodePen 标签卡片一个Hexo插件，用于在文章中嵌入CodePen的代码片段，形如如下样式： 安装：在博客项目根目录打开终端 1npm install hexo-codepen-v2 --save 使用：在博客文章源文件中插入 1234{% codepen [slugHash] [default_tabs] [height] [width] [userId|anonymous|anon] [thmem] %}&lt;!-- For Example --&gt;{% codepen AZpVPz result 500 100% eltonkamami default %} 参数获取：访问CodePen效果预览界面，点击页面右下角的Embed按钮，弹出如下界面 slugHash：从图中的示例位置获取 default_tabs：页面嵌入的CodePen默认打开的标签页，可选html/css/js和result，默认html,result height：标签卡片高度，可参考CodePen提供的data-height，也可自定义高度（单位px） width：标签卡片宽度，根据博客页面宽度自行调整，默认为100% userId：从图中的示例位置获取，也可选anonymous theme：可选light，dark，default 若高频使用此标签卡，可在站点配置文件(_config.yml)中配置除开slugHash的所有属性，示例如下： _config.yml123456789 ... ...# 添加如下示例配置codepen: default_tabs: 'html,result' height: 400 width: '100%' userId: 'anonymous' thmem: 'default' 添加后在文章中仅需输入{% codepen [slugHash] %}即可 数据可视化图表(Chart.js)一个Hexo插件，用于在文章中插入数据可视化的图表，形如如下样式： var ctx = document.getElementById('chart7546').getContext('2d'); var options = { type: 'line', data: { labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'], datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45] }] }, options: { responsive: true, title: { display: true, text: 'Chart.js Line Chart' } } };; new Chart(ctx, options); 安装：在博客项目根目录打开终端 1npm install hexo-tag-chart --save 使用：在博客文章源文件中插入 1234567891011121314151617181920212223242526{% chart [width] [height] %}\\\\这里填写Chartjs配置{% endchart %}&lt;!-- For Example --&gt;{% chart 80% 300 %}{ type: 'line', data: { labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'], datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45] }] }, options: { responsive: true, title: { display: true, text: 'Chart.js Line Chart' } }};{% endchart %} width：图标宽度，默认100%，单位% height：图标高度，默认300，单位px Chart.js的详细配置请参见官方文档 多媒体插件一个Hexo插件，支持在文章中嵌入音乐、视频播放器窗口，形如如下样式： .bbplayer{width: 100%; max-width: 850px; margin: auto} document.getElementById(\"mmedia-KFrDjFGUkhxMavWs\").style.height=document.getElementById(\"mmedia-KFrDjFGUkhxMavWs\").scrollWidth*0.76+\"px\"; window.onresize = function(){ document.getElementById(\"mmedia-KFrDjFGUkhxMavWs\").style.height=document.getElementById(\"mmedia-KFrDjFGUkhxMavWs\").scrollWidth*0.76+\"px\"; }; 安装：在博客项目根目录打开终端 1npm install hexo-tag-mmedia --save 使用：在博客文章源文件中插入 1234{% mmedia [type] [field-1 field-2 ... ] %}&lt;!-- For Example --&gt;{% mmedia 'bilibili' 'bvid:BV1jt411d7A5' 'autoplay:false' %} type：可选bilibili、dplayer等，具体参见文档 类型为bilibili，field为bvid:xxx 类型为dplayer，field为url:xxx field：不定长字段，字段内容由type字段的值决定 更多可选配置请参见官方文档，不同配置值对应Demo","link":"/posts/8a8/"},{"title":"理解取余与取模运算","text":"取模运算(mod)和取余运算(rem)两个概念有重叠的部分，但又不完全一致；主要区别在于对负整数进行除法运算时操作不同。取模主要是用于计算机术语中；取余则更多是数学概念。 取模和取余的区别这是由于这两个函数的生成机制不同，rem 函数(取余)采用 fix 函数，而 mod 函数(取模)采用了 floor 函数（这两个函数是用来取整的，fix 函数向 0 方向舍入，floor 函数向无穷小方向舍入）。 取余运算 在计算商值时 商值向0方向舍入；靠近0原则 取模运算 在计算商值时 商值向负无穷方向舍入；尽可能让商值小的原则(不超多商值的最大值) Tip 取余运算向0取整，取模运算向负无穷取整 计算步骤假设有整数a和b，那么取模/取余运算可以分为两步运算： 求整数商：c = a/b; 计算模/余数：r = a - (c*b); 总计算模/余数：a mod b = a - b[a/b] ([a/b]表示整数商) 例子取模 简述 商值 取模值 5 mod 3 = 2 5/3 = 1.66 商取小原则 商=1 5 - 3 * 1 = 2 2 -5 mod 3 = 1 -5/3 = -1.66 商取小原则 商=-2 -5 - (3 * -2) = 1 1 5 mod -3 = -1 5/-3 = -1.66 商取小原则 商=-2 5 - (-3 * -2) = -1 -1 -5 mod -3 = -2 -5/-3 = 1.66 商取小原则 商=1 -5 - (-3 * 1) = -2 -2 取余 简述 商值 取余值 5 rem 3 = 2 5/3 = 1.66 商靠0原则 商=1 5 - 3 * 1 = 2 2 -5 rem 3 = -2 -5/3 = -1.66 商靠0原则 商=-1 -5 - (3 * -1) = - 2 -2 5 rem -3 = 2 5/-3 = -1.66 商靠0原则 商=-1 5 - (-3 * -1) = 2 2 -5 rem -3 = -2 -5/-3 = 1.66 商靠0原则 商=1 -5 - (-3 * 1) = - 2 -2 java 中 % 是取余运算；Python中 % 是取模运算 模的理解“模”是指一个计量系统的计数范围；如时钟，12个整点为计算范围，则模为12；计算机也是一个计量机器，模为32位或者64位； 32位计算机正常理解 在模 范围内能表达的 有 [0, 2³²-1]；那么负数该怎么表达呢，所以出现了补码；也就是 正数 + 负数 正好达到模的溢出阀值2³²；所以在计算机中负数是用补码方式表达的原因； 关于补码的例子：在12模的时钟中；假设当前时针指向10点,而准确时间是6点,调整时间可有以下两种拨法 倒拨4小时,即：10-4=6 (10-4) mod 12 = 6 顺拨8小时：10+8=12+6=6 （10+8）mod 12 = 6 在以12模的系统中，加8和减4效果是一样的；因此凡是减4运算，都可以用加8来代替。对“模”而言，8和4互为补数。实际上以12模的系统中11和1、10和2、9和3、7和5、6和6都有这个特性；共同的特点是两者相加等于模 “取模”实质上是计量器产生“溢出”的量，它的值在计量器上表示不出来，计量器上只能表示出模的余数(取模)；任何有模的计量器，均可化为加减法运算 5 mod 3 = 2 例子中；模 为 3；2 为取模的值 计算机中取模应用思想取模的本质是：取模的值，必定会模的范围内；所以，计算机领域引用该特性，使元素路由算法不超出边界，并有规则存放。 首先确定模(范围)；元素取模，使元素有规则的落入模的范围内容器中 如：hashMap、数据库分表、分布式节点路由算法等","link":"/posts/dc04/"},{"title":"记录几个CS方向的自学网站","text":"CS自学指南一个北大信科的大佬的CS笔记，根据北大信科学院课程对应的国外高校的优质开放课程的自学建议清单，内容涵盖多个领域。 AI算法工程师手册作者为前阿里巴巴资深算法工程师，智易科技首席算法研究员，现任腾讯高级算法研究员，内容为作者多年以来学习总结的笔记。 Java全栈知识体系一个系统化的Java全站知识体系，内容涵盖Java基础，Java部分源码，JVM，Spring，Spring Boot，Spring Cloud，数据库原理，MySQL，ElasticSearch，MongoDB，Docker，K8S，CI&amp;CD，Linux，DevOps，分布式，中间件，开发工具，Git，IDE，源码阅读，开源项目等…… Web全栈知识体系内容涵盖JavaScript进阶，计算机网络，Vue，React，Node.js进阶，工程化数据结构与算法，项目案例等…… C++全栈知识体系一个记录C++知识的学习网站！ 包含内容:C++ 基础, 算法, 数据库,MySQL, ElasticSearch, Redis, 编程四大件, 微服务 , 中间件, ZeroMQ, 部署工具, Docker, k8s, Istio, Linux, 实践|项目, 开源项目, 个人项目, 读书笔记, 面试题, 优质文章, 博客推荐.. 未完待续……","link":"/posts/ba39/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GithubAction","slug":"GithubAction","link":"/tags/GithubAction/"},{"name":"GithubPages","slug":"GithubPages","link":"/tags/GithubPages/"},{"name":"Vercel","slug":"Vercel","link":"/tags/Vercel/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"搭建&#x2F;配置笔记","slug":"搭建-配置笔记","link":"/tags/%E6%90%AD%E5%BB%BA-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"},{"name":"主题","slug":"主题","link":"/tags/%E4%B8%BB%E9%A2%98/"},{"name":"插件","slug":"插件","link":"/tags/%E6%8F%92%E4%BB%B6/"},{"name":"Math","slug":"Math","link":"/tags/Math/"},{"name":"Computer Science","slug":"Computer-Science","link":"/tags/Computer-Science/"},{"name":"网站收藏","slug":"网站收藏","link":"/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"烂笔头","slug":"烂笔头","link":"/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"}],"pages":[{"title":"about","text":"这是本人的小破站","link":"/about/index.html"}]}