{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/posts/3eeb/"},{"title":"hexo个人博客SEO配置记录","text":"什么是SEO？ 常见的SEO手段/技巧 域名 TKD sitemap robots.txt 链接层级和目录层级 固定链接的设置 内链 外链 配置404页面 优质内容 我的博客站点SEO 为每篇文章添加TDK 为博客的每篇文章配置固定链接 博客配置sitemap.xml 博客配置robots.txt 向主流搜索引擎提交sitemap 利用API主动向搜索引擎提交URL 什么是SEO？搜索引擎优化（英语：search engine optimization，缩写为SEO）是透过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少网站都希望透过各种形式来影响搜索引擎的排序，让自己的网站可以有优秀的搜索排名。当中尤以各种依靠广告维生的网站为甚。 所谓“针对搜索引擎作优化的处理”，是指为了要让网站更容易被搜索引擎接受。搜索引擎会将网站彼此间的内容做一些相关性的资料比对，然后再由浏览器将这些内容以最快速且接近最完整的方式，呈现给搜索者。搜索引擎优化就是通过搜索引擎的规则进行优化，为用户打造更好的用户体验，最终的目的就是做好用户体验。 搜索引擎优化(SEO)—— wikipedia 以上便是维基百科关于SEO的解释，既然SEO是为了让网站更容易被搜索引擎接受，那么我们不妨从以下几个方面来主动告诉搜索引擎，我的网站上有什么。 常见的SEO手段/技巧域名一个网站的是否容易被人熟知，首先便是其名字是否让人容易记忆，而域名作为一个网站在网络上的身份证，一个简单，易记、具有特殊含义的域名更容易被人关注，也更容易吸引流量。 TKD即网站页面的Title、Keywords、Description，这些信息通常会存储于网页的Front-matter信息中 123&lt;title&gt;这里是页面标题&lt;/title&gt;&lt;meta name=\"keywords\", content=\"这里是页面关键词\"&gt;&lt;meta name=\"description\" content=\"这里是页面描述\"&gt; title：当下人们普遍反感标题党，标题浮夸，内容垃圾掉渣，但是为什么人们会有这种结论呢，还不是经过大量点击访问，不断踩坑总结的经验，有一点是不可反驳的是，标题党的确是能够吸引用户访问。当然本篇不是要讲如何写浮夸的标题，而是说一个清晰，明确的标题更容易切中搜索引擎用过户的检索关键字，更容易被用户检索并访问到。 keywords：keywords的主要作用是告诉搜索引擎本页内容是围绕着哪些关键词展开的，因此每个keywords都要在文中有相应的匹配。对自己网站的页面添加keywords虽然对网站排名的帮助并不大，但是却能够提高网站在搜索引擎的整体权重。虽然Google已经声称不再使用Keywords，但是作为个人博客站长，自己的博客文章主要面对的用户群体还是中文区用户，SEO也主要是针对中文搜索引擎，那么Keywords就还是有必要的。keywords长度设置一般不超过4个，过多关键词反而不利于检索，中间用英文的逗号做间隔， description：keywords是对文章关键字的展示，那么description就是对页面内容的高度概括，是页面内容的摘要。同keywords一样，description虽然对提升网站排名帮助不大，但是对于用户检索却起着至关重要的作用 sitemapSitemap(站点地图)是一种文件的统称，通常以txt或者xml格式的形式存在于站点的根目录。通过Sitemap(站点地图)你可以告诉搜索引擎关于你的站点中的网页、视频或其他相关信息，帮助搜索引擎更好的认识和理解你的站点。格式正确的站点地图会帮助搜索引擎更高效的抓取你的网站。 robots.txt这是一个说明文件，用来告诉搜索引擎的蜘蛛程序自己的站点下面那些页面可以被抓取，哪些不可以被抓取。robots.txt文件必须放置在站点的根目录下，且文件必须全部是小写英文字母，名为robots.txt的格式。 链接层级和目录层级页面链接层级和目录层级过深，会严重影响用户体验，能够保证用户在不超过3次点击就进入页面，对于用户体验来说是非常好的。 固定链接的设置一个资源对应一个固定链接，即使后期资源位置发生变化，依然能够通过该固定链接访问到 内链即站点内部的链接，每一个指向页面的内联都是对该页面重要程度的投票，因此，在一个网站中导航栏的页面权重就会非常高。如果站内页面能够相互关联，有助于提升网站整体的搜索权重。 外链就是其他网站到自己站点的链接，如果对方将你的站点地址添加到对方的友链列表，并且可以长期稳定的访问，能够极大程度的提升自己网站的搜索权重。 配置404页面404页面是用来告知用户当前访问的页面并不存在，如果自己的站点没有设置404页面，当用户访问你站内不存在的页面时，浏览器会直接空白显示并报错，这严重影响了用户体验，甚至会误导用户你的网站已经存在。设置一个简洁美观404页面，并引导用户访问其他页面或返回本站点首页对于一个网站来说是至关重要的。 优质内容上面所说的都是技术手段，用来吸引用户访问，而用户真正浏览的，是自己站点内的内容，一个有着优质内容的站点，自然会吸引用户访问。 我的博客站点SEO上文简单说了一下SEO以及常见SEO方式，那么，现在就操练起来，开始对自己的博客进行SEO优化。 首先说明，我的博客是采用GitHub Pages + Github Action自动构建自动部署的，博客项目的全部源码包括文章源文件使用一个私有仓库存储，站点页面使用一个公开的仓库存储，使用git管理自己hexo博客。如果你的部署方式与我的不同，请酌情参考， 点击此处查看我的博客详细配置过程。 博客域名选定：blog.geektime.club 为每篇文章添加TDK我的博客使用Hexo+Icarus theme生成的静态页面，不具备服务后端，因此所有的TDK都要写入文章中，Icarus 主题有设置front-matter的配置项，位置如下： _config.icarus.yaml1234head: meta: - \"name=xxx;content=xxx\" - \"name=xxx;content=xxx\" 但是需要注意，该配置项是全局配置项，会应用到站内的每个页面，不建议在此设置。每篇文章的内容不同，对应的TDK自然也不同，页面的TDK可以在每篇文章源文件的front-matter中设置，示例如下： 文章xxx.md123456789--- ... ... ...head: meta: - \"name=xxx;content=xxx\" - \"name=xxx;content=xxx\"--- 为博客的每篇文章配置固定链接hexo框架默认情况下为每篇文章配置的链接是domain/year/month/article-title，这种链接对文章检索非常不友好，且在文章的title或源文件名更改后，文章的链接也会随之更该。若要使文章的链接固定不变，可以安装abbrlink插件，为每篇文章生成一个唯一的链接，方法如下： 在博客项目根文件夹下打开终端，安装如下Hexo插件 1npm install hexo-abbrlink --save 打开目录内的站点配置文件（_config.yml），配置abbrlink插件， _config.yml123456789permalink: posts/:abbrlink/# 文件末尾添加以下内容# hexo-abbrlinkabbrlink: alg: cr32 rep: hex drafts: false 保存配置文件后在终端执行hexo g 应用更改，并生成页面文件，当看到自己的文章源文件的front-matter信息中多了一项：abbrlink: xxx，即该项配置完成 hexo-abbrlink更多自定义配置请点击这里 博客配置sitemap.xmlhexo框架默认情况下不能生成sitemap.xml，需要通过安装hexo插件来实现，在博客项目根文件夹下打开终端，安装如下Hexo插件： 1npm install hexo-generator-sitemap --save 打开目录内的站点配置文件（_config.yml），配置sitemap插件，在末尾添加内容如下： _config.yml12345# hexo-generator-sitemaphexo-generator-sitemap: path: sitemap.xml tags: true category: true 这里面的path字段填写sitemap的存储位置，默认值：path: sitemap.xml，sitemap.xml一般放在站点的根目录，所以一般不用改动 博客配置robots.txt为博客创建蜘蛛协议robots.txt文件，告诉网络蜘蛛哪些页面可以被爬取索引在hexo项目目录的source文件下创建robots.txt文件，在该文件中添加如下内容 robots.txt12345678910111213User-Agent: *# 告诉蜘蛛哪些可以被爬取（真实文件中请勿添加该行）Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Allow: /about/# 告诉蜘蛛哪些不能被爬取（真实文件中请勿添加该行）Disallow: /js/Disallow: /css/Disallow: /fonts/# 指定站点地图所在位置（真实文件中请勿添加该行）Sitemap: https://blog.geektime.club/Sitemap.xml 向主流搜索引擎提交sitemap在完成上文几步后，执行后文操作前，请先在终端执行git push -u origin main将本地更改同步到Github上 同时需注意，以下操作需要自己的博客站点已经部署完成，且能通过域名访问，方可执行。 百度 首先注册百度搜索资源平台，平台可以使用百度账号直接登录。 点击个人中心 -&gt; 站点管理 -&gt; 添加网站，添加个人博客站点 添加网站的第三步验证网站，可选的有两个网站的验证方式，亦或是三个，多了一个CNAME验证方式。这里我选择的是HTML标签验证的方式 可以看到这种方式实际上是在站点的front-matter信息中添加一条meta信息，刚好我所使用的icarus主题就提供有便捷的配置项，添加方式在上文已经给出，点击这里查看。 验证完成后，点击搜索服务 -&gt; 普通收录，在此页面可以看到百度提供了三种收录方式，我的博客采用API提交+sitemap提交，API提交方法是会在后文说明。 点击sitemap，按照页面提示提交自己的sitemap文件链接。 Bing 注册或登录必应网站管理员工具，添加自己的网站 验证网站支持多种方式，我选择使用HTML meta 标记，使用方式同上文百度。 点击网站地图 -&gt; 提交网站地图，在弹出的对话框中输入自己站点的sitemap文件所在位置URL。 Google 注册或登录Google Search Console 由于我是使用Github Pages发布站点，所以选择第二种方式网址前缀，输入自己的domain，然后会弹出如下界面 可以看到验证方式也是有很多种的，同样的，我选择使用HTML标记方式验证所有权，使用方式同上文百度。 验证完成后点击页面左侧站点地图，在右侧填入sitemap.xml(如果你的站点地图不在站点根目录，请自行选择输入) 利用API主动向搜索引擎提交URL由于我的站点是使用Github Action服务自动生成的，Hexo插件列表里面的自动提交URL到搜索引擎的插件不能能正常工作，且在使用GitHub Action时无法查看提交情况。所以我的方式是在Github Action workflows 文件中添加一个步骤，让博客在自动部署完成后将站点的URL提交到各大搜索引擎。且该种方式可以通过查看Action的详细执行流程确定URL是否正常提交。 使用API提交URL，需要先从站长平台获取用于鉴权的token。 百度：登录百度搜索资源平台，点击搜索服务 -&gt; 普通收录，在API提交方式标签下，复制接口调用地址种token=后面的值，粘贴至空白文档，以备下文使用。 Bing：登录必应网站管理员工具，点击页面右上角齿轮图标(⚙)，侧边弹出页面点击API访问 -&gt; 点击API密钥，生成API访问Token，复制token并粘贴至空白文档，以备下文使用。 Google：登录GCP (Google Cloud Platform)，点击左上角折叠菜单按钮，弹出页面点击IAM和管理 -&gt; 服务账号， 在上方点击+创建服务账号， 输入自定义服务账号名称，这里以aaa示例，之后之后直接点击完成 完成账号创建后，点击列表中自己刚刚创建的账号，切换到密钥标签卡，点击添加密钥 -&gt; 创建新密钥， 选择并创建json格式的密钥，保存该json密钥（切勿随意公开）， 在GCP页面上方搜索框中输入indexing API，点击下方市场中的indexing API，启用indexing API， 打开Github用于存放博客项目源文件的仓库，点击仓库的setting-&gt; Secrets and variables -&gt; Actions -&gt; New repository secret，创建以下几个secret: BAIDU_TOKEN : 值填写上文获取的百度API提交token BING_TOKEN : 值填写上文获取的必应API提交token GOOGLE_CLIENT_EMAIL : json密钥中的client_email对应的值 GOOGLE_PRIVATE_KEY : json密钥中的private_key对应的值 COUNT : 默认为10 SITE : 你的博客地址URL，包括https:// SITEMAP : 你站点的sitemap.xml文件的URL 在博客项目文件夹下的.github/workflows/xxx.yml，向xxx.yml中一个Action的step，注意yaml文件的语法，层级缩进不能使用tab键，必须使用空格控制缩进。 xxx.yml12345678910111213141516jobs: deploy: ... ... ... # Search Engine Urls Push - name: Search Engine Urls Push uses: 3Alan/search-engines-urls-push@v0.2.3 with: site: ${{ secret.SITE }} count: ${{ secret.COUNT }} sitemap: ${{ secret.SITEMAP }} bing-token: ${{ secrets.BING_TOKEN }} baidu-token: ${{ secrets.BAIDU_TOKEN }} google-client-email: ${{ secrets.GOOGLE_CLIENT_EMAIL }} google-private-key: ${{ secrets.GOOGLE_PRIVATE_KEY }} 以上全部执行完成后在终端执行git push -u origin main同步本地更改到GitHub，会自动触发Action，点击博客源文件仓库中的Action，点击正在构建的Action，构建过程中可以看到如下：截图中的bing报错是因为超出了Bing的每日提交数目限制，不影响正常提交","link":"/posts/38/"},{"title":"icarus主题的高级用法","text":"自定义效果 画廊 突出提示栏 文章摘要 文章内容黑幕/刮刮乐 页内标签页 彩色提示消息 图片引用声明 Hexo内置专用的标签插件 Block Quote | 引用块 Code Block | 代码块 反引号代码块 插入jsFiddle 插入Gist 插入iframe 插入image 插入link 插入Youtube 插入Vimeo 引用站内其他文章 文章摘要和截断 自定义效果画廊安装使用若要在文章中启用主题自带的画廊组件，首先需要在主题配置文件中启用画廊组件。 _config.icarus.yml12plugins: gallery: true 需要使用&lt;div class=\"justified gallery\"&gt;与&lt;/div&gt;标签包裹，如果要使用markdown语法来引用图片，则需要在HTML标签和MarkDown之间留有空行。使用HTML语法时则无需留空行。需注意，文章中启用画廊组件时建议文章主体和画廊部分留空行。 markdown语法引入图片123456&lt;div class=\"justified-gallery\"&gt;![](图片路径或URL)![tiger](https://images.pexels.com/photos/792381/pexels-photo-792381.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=2)&lt;/div&gt; HTML语法引入图片1234&lt;div class=\"justified gallery\"&gt;&lt;img src=\"图片路径或URL\" alt=\"图片别名\"/&gt; &lt;img src=\"https://images.pexels.com/photos/792381/pexels-photo-792381.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=2\" alt=\"tiger\"/&gt; &lt;/div&gt; 示例效果 示例图片来源于www.pexels.com 突出提示栏 形如上面或官方文档中的蓝色突出提示栏，和主题颜色很搭配，实现方式如下 第一种第一种提示，页面内的提示12345&lt;article class=\"message message-immersive is-primary\"&gt; &lt;div class=\"message-body\"&gt; &lt;i class=\"fas fa-circle-info mr-2\"&gt;&lt;/i&gt;示例图片来源于&lt;a href=\"https://www.pexels.com\"&gt;www.pexels.com&lt;/a&gt; &lt;/div&gt;&lt;/article&gt; 第二种需要注意。官方第二种点击后实际是在站内跳转，所以这里就需要使用以下hexo框架为我们提供的post_path变量了, 示例中en/post_path为文章的post_path，具体请参见Hexo文档 第二种提示，能够站内跳转12345&lt;article class=\"message message-immersive is-primary\"&gt; &lt;div class=\"message-body\"&gt; &lt;i class=\"fas fa-globe-asia mr-2\"&gt;&lt;/i&gt;本文同时提供如下语言的翻译：&lt;a href=\"{% post_path en/Getting-Started %}\"&gt;English&lt;/a&gt;. &lt;/div&gt;&lt;/article&gt; 第三种与第一种基本一致，略 第三种提示 &gt;folded12345&lt;article class=\"message message-immersive is-warning\"&gt; &lt;div class=\"message-body\"&gt; &lt;i class=\"fas fa-question-circle mr-2\"&gt;&lt;/i&gt;文章内容有误？请点击&lt;a href=\"反馈地址URL\"&gt;此处&lt;/a&gt;提交修改。 &lt;/div&gt;&lt;/article&gt; 文章摘要用户浏览一个博客网站时，最先看到的是文章标题以及文章的摘要，通常情况下文章的摘要是对文章内容的高度概括，一般不适合展示在文章正文，换言之就是摘要只展现在文章列表，而在文章正文处不显示，有两种方式可以实现该种效果。 第一种将文章的摘要写在markdown文件开头的front-matter信息中，本篇文章的摘要使用就是这种 文章xxx.md1234567--- ... ... ...excerpt: 这是一篇关于...---xxxxxx文章正文 第二种在文章正文中使用Bulma搭配HTML标签实现 文章xxx.md123456789101112131415这里的内容会出现的**简介和正文**{% raw %}&lt;div class=\"post-summary\"&gt;{% endraw %}这里的内容只会出现在**简介**{% raw %}&lt;/div&gt;{% endraw %}&lt;!--more--&gt;&lt;style type=\"text/css\"&gt; .post-summary{ display:none; }&lt;/style&gt;这里的内容只会出现在**正文** 文章内容黑幕/刮刮乐知道这个东西源自与吾爱破解论坛，可惜现在论坛不让用刮刮乐了👉，难搞，那就在自己的博客上面玩一玩吧。 .hide { color: #fff} 文章内容文字黑幕、刮刮乐12345678910知道这个东西源自于吾爱破解论坛，可惜现在论坛不让用刮刮乐了, {% raw %}&lt;span class=\"hide\"&gt;难搞，&lt;/span&gt;{% endraw %}那就在自己的博客上面玩一玩吧。{% raw %}&lt;style type=\"text/css\"&gt; &lt;!--这是黑幕代码--&gt; .hide { color: #000; background: #000; } .hide:hover { color: #fff; } &lt;!--这是刮刮乐代码--&gt; .hide { color: #fff}&lt;/style&gt;{% endraw %} 页内标签页 .example-tab-container { margin: 0 0 20px 0; padding: 10px 20px 20px 20px; border-radius: 6px; box-shadow: 0 0.5em 0.75em -0.125em rgb(10,10,10,0.1), 0 0px 0 1px rgb(10,10,10,0.02); } 标签页是一个功能强大的用于展示平行内容的标签插件，同一时间内，只有活动的标签内容才能展示给用户 标签页是一个功能强大的用于展示平行内容的标签插件，同一时间内，只有活动的标签内容才能展示给用户，形如官方文档页面的效果，其实现方式如下： 语法定义123456789{% tabs size:&lt;大小&gt; align:&lt;对齐&gt; style:&lt;样式&gt; %}&lt;!-- tab id:&lt;标签id&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; active --&gt;&lt;标签内容&gt;&lt;!-- endtab --&gt;&lt;!-- tab id:&lt;标签id&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; --&gt;&lt;标签内容&gt;&lt;!-- endtab --&gt;...{% endtabs %} 还原官网的页面效果: 从源码安装 使用NPM安装 从GitHub的仓库中下载源码的压缩包…… 若要使用NPM将Icarus安装为node包…… 标签容器（tabs）字段解释标签容器（tabs）有三个字段，分别为size， align， style， size可选项，定义标签页的大小，有四个配置值（small，不指定(默认)，medium，large），示例如下： 第一页 第二页 这是一个小（small）标签页容器的第一页 这是一个小（small）标签页容器的第二页 第一页 第二页 这是一个不指定（默认）标签页容器的第一页 这是一个不指定（默认）标签页容器的第二页 第一页 第二页 这是一个中（medium）标签页容器的第一页 这是一个中（medium）标签页容器的第二页 第一页 第二页 这是一个大（large）标签页容器的第一页 这是一个大（large）标签页容器的第二页 align可选项，用于定义标签页按钮的对齐方式，有四个配置值（不指定(默认left)，centered，right，fullwith），示例如下： 第一页 第一页 这是一个左对齐（或不指定对齐）的标签页容器的第一页 这是一个左对齐（或不指定对齐）的标签页容器的第二页 第一页 第一页 这是一个居中对齐（centered）的标签页容器的第一页 这是一个居中对齐（centered）的标签页容器的第二页 第一页 第一页 这是一个右对齐（right）的标签页容器的第一页 这是一个右对齐（right）的标签页容器的第二页 第一页 第一页 这是一个全宽（fullwidth）的标签页容器的第一页 这是一个全宽（fullwidth）的标签页容器的第二页 style可选项，用于定义按钮的样式，可以和全宽对齐方式结合，共有六种配置值。 默认对齐方式下的盒子（boxed）样式、拨动开关（toggle）样式、圆角拨动开关(toggle-rounded)样式； 全宽对齐方式(fullwidth)下的盒子样式、拨动开关样式、圆角拨动开关样式。示例如下： 第一页 第二页 这是一个盒状（boxed）标签容器的第一页 这是一个盒状（boxed）标签容器的第二页 第一页 第二页 这是一个拨动开关（toggle）标签容器的第一页 这是一个拨动开关（toggle）标签容器的第二页 第一页 第二页 这是一个圆角拨动开关toggle-rounded）标签容器的第一页 这是一个圆角拨动开关（toggle-rounded）标签容器的第二页 第一页 第二页 这是一个全宽盒状（boxed）标签容器的第一页 这是一个全宽盒状（boxed）标签容器的第二页 第一页 第二页 这是一个全宽拨动开关（toggle）标签容器的第一页 这是一个全宽拨动开关（toggle）标签容器的第二页 第一页 第二页 这是一个全宽圆角拨动开关toggle-rounded）标签容器的第一页 这是一个全宽圆角拨动开关（toggle-rounded）标签容器的第二页 标签（tab）字段解释id必填项，为标签页元素的独特标识符(ID)，且该标识符在文章页面中是唯一的，这样Icarus主题才能正确定位，显示和隐藏标签页中的内容。 active必填项，标记当前标签页是否默认显示， 同一时刻一个标签组中只有一个标签页可以设置为默认显示（active）。 title可选项，定义标签按钮中显示的图标，它的值应为FontAwesome中的class-name，如果图标的class-name中包含空格，则配置名和配置值需要用引号包裹住。 Github Node.JS 这个标签页的图标（icon）为（\"icon:fa-brands fa-github\"） 这个标签页的图标（icon）为（\"icon:fa-brands fa-node-js\"） title: 可选项，定义标签页按钮的标题，如果标题中含有空格，则配置名和配置值需要用引号包裹住。 有标题的标签页 有标题的 标签页 这是一个有标题的标签页，标题（title）为（title:有标题的标签页） 这是一个有标题且标题带空格的标签页，标题（icon）为（\"title:有标题的 标签页\"） 这是一个无标题的标签页 彩色提示消息五颜六色的消息块可以用来强调你文章中的部分文本，它的语法定义如下： 语法定义123{% message color:&lt;颜色&gt; size:&lt;大小&gt; icon:&lt;图标&gt; title:&lt;标题&gt; %}&lt;消息内容&gt;{% endmessage %} color 字段可选项，用于定义消息块颜色，可用配置值有default，dark，primary，info，success，warning，danger。示例如下： default 这是没有指定配置值的消息块 dark 这是配置值为黑色（dark）的消息块 primary 这是配置值为主题色（primary）的消息块 info 这是配置值为提示色（info）的消息块 success 这是配置值为成功色（success）的消息块 warning 这是配置值为警告色（warning）的消息块 danger 这是配置值为警告色（danger）的消息块 size 字段可选项，用于定义消息块的大小，可用配置值有small，default，medium，large，示例如下： small 这是配置值为小（small）的消息块 default 这是没有指定配置值的消息块 medium 这是配置值为中（medium）的消息块 large 这是配置值为大（large）的消息块 icon 字段可选项，用于定义消息块头部的图标，配置值应为FontAwesome图标的class name，如果图标的class name中包含有空格，则配置名与配置值需要用引号包裹住。 一个有着Github图标的消息块 这是一个有着GitHub图标（”icon:fa-brands fa-github”）的消息块 一个有着Node.js图标的消息块 这是一个有着Node.js图标（”icon:fa-brands fa-node-js”）的消息块 title 字段可选项，用于定义消息块的标题，如果标题中包含有空格，则配置值与配置名需要用引号包裹住。 有标题的 消息块 这是一个有标题（”title:有标题的 消息块“）的消息块。 这是一个没有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 这是一个有标题的消息块。 图片引用声明食用方式： 图片引用声明1234&lt;a class=\"tag is-dark is-medium\" href=\"图片URL\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-camera\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;-----声明文字----&lt;/a&gt; 示例1234&lt;a class=\"tag is-dark is-medium\" href=\"https://www.vecteezy.com/free-vector/vector-landscape\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-camera\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;Vector Landscape Vectors by Vecteezy&lt;/a&gt; &nbsp;&nbsp; Vector Landscape Vectors by Vecteezy Hexo内置(专用)的标签插件 Block Quote | 引用块在文章中插入引言，可包含作者、来源、和标题别名：quote，语法格式如下： 123{% blockquote [author[, source]] [link] [source_link_title] %}content{% endblockquote %} 示例-没有提供参数123{% blockquote %}Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.{% endblockquote %} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 示例-引用书里的句子123{% blockquote David Levithan, Wide Awake %}Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.{% endblockquote %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 示例-引用Twitter帖子123{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}NEW: DevDocs now comes with syntax highlighting. http://devdocs.io{% endblockquote %} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 示例-引用网络上的文章123{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}Every interaction is both precious and an opportunity to delight.{% endblockquote %} Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Code Block | 代码块在文章中插入代码。别名：code，语法格式如下： 123{% codeblock [title] [lang:language] [url] [link text] [additional options] %}code snippet{% endcodeblock %} 示例-普通代码块123{% codeblock %}alert('Hello World!');{% endcodeblock %} 1alert('Hello World!'); 示例-指定语言123{% codeblock lang:objc %}[rectangle setX: 10 y: 10 width: 20 height: 20];{% endcodeblock %} 1[rectangle setX: 10 y: 10 width: 20 height: 20]; 示例-附件说明123{% codeblock Array.map %}array.map(callback[, thisArg]){% endcodeblock %} Array.map1array.map(callback[, thisArg]) 示例-附加说明和网址1234{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3]{% endcodeblock %} _.compactUnderscore.js12_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3] 反引号代码块使用方式同代码块，但是使用三个反引号来分割块，即markdown默认的代码块形式，语法格式如下： [title] [url] [link text]123code snippets 插入jsFiddle在文章中嵌入jsFiddle，语法格式如下： 1{% jsfiddle shorttag [tabs] [skin] [width] [height] %} 示例1{% jsfiddle zx2xyzea html,css,js,result light 100% 400% %} 插入Gist在文章中嵌入Gist，语法格式如下： 1{% gits gist_id [filename] %} 示例1{% gist defunkt/2059 %} 插入iframe在文章页面中嵌入iframe 1{% iframe url [width] [height] %} 示例1{% iframe https://blog.geektime.club 100% 400% %} 插入image在文章中插入图片 1{% img [class names] /path/to/image [width] [height] '\"title text\" \"alt text\"' %} 插入link在文章中插入超链接 1{% link text url [external] [title] %} 插入Youtube在文章中嵌入Youtube视频iframe 1234{% youtube video_id [type] [cookie] %}// [type]：默认为空，可选 playlist (播放列表)// [cookie]: 默认为true，可选false 示例1{% youtube yaqe1qesQ8c %} 插入Vimeo在文章中嵌入Viemo视频iframe 1{% vimeo video_id %} 示例1{% vimeo 191822120 %} 引用站内其他文章在文章中插入站内其他文章的引用链接 12{% post_path filename %}{% post_link filename [title] [escape] %} 在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。 例如，在文章中使用 {% post_link how-to-bake-a-cake %} 时，只需有一个名为 how-to-bake-a-cake.md 的文章文件即可。即使这个文件位于站点文件夹的 source/posts/2015-02-my-family-holiday 目录下、或者文章的永久链接是 2018/en/how-to-bake-a-cake，都没有影响。 默认链接文字是文章的标题，你也可以自定义要显示的文本。 默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用escape选项，禁止对特殊字符进行转义 文章摘要和截断在文章中使用 &lt;!-- more --&gt;，那么 &lt;!-- more --&gt; 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。","link":"/posts/8917/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"},{"name":"搭建&#x2F;配置笔记","slug":"搭建-配置笔记","link":"/tags/%E6%90%AD%E5%BB%BA-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"},{"name":"主题","slug":"主题","link":"/tags/%E4%B8%BB%E9%A2%98/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/categories/Blog/"}],"pages":[{"title":"about","text":"这是本人的小破站","link":"/about/index.html"}]}